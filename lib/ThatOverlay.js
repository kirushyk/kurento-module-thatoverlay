/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var disguise = kurentoClient.disguise;

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;


var Transaction = kurentoClient.TransactionsManager.Transaction;

var Filter = kurentoClient.register.abstracts.Filter;


function noop(error, result) {
  if (error) console.trace(error);

  return result
};


/**
 * Create an element
 *
 * @classdesc
 *  ThatOverlay interface. Documentation about the module
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:thatoverlay.ThatOverlay
 */
function ThatOverlay(){
  ThatOverlay.super_.call(this);
};
inherits(ThatOverlay, Filter);


//
// Public methods
//

/**
 * Set text, color and font for title and watermark.
 *
 * @alias module:thatoverlay.ThatOverlay.setup
 *
 * @param {external:String} title
 *
 * @param {external:String} titleFont
 *
 * @param {external:Number} tR
 *  [0..1]
 *
 * @param {external:Number} tG
 *  [0..1]
 *
 * @param {external:Number} tB
 *  [0..1]
 *
 * @param {external:Number} tA
 *  [0..1]
 *
 * @param {external:String} watermark
 *
 * @param {external:String} watermarkFont
 *
 * @param {external:Number} wR
 *  [0..1]
 *
 * @param {external:Number} wG
 *  [0..1]
 *
 * @param {external:Number} wB
 *  [0..1]
 *
 * @param {external:Number} wA
 *  [0..1]
 *
 * @param {external:Integer} interval
 *  Amount of frames before watermark will jump.
 *
 * @param {module:thatoverlay.ThatOverlay~setupCallback} [callback]
 *
 * @return {external:Promise}
 */
ThatOverlay.prototype.setup = function(title, titleFont, tR, tG, tB, tA, watermark, watermarkFont, wR, wG, wB, wA, interval, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  //  
  // checkType('String', 'title', title, {required: true});
  //  
  // checkType('String', 'titleFont', titleFont, {required: true});
  //  
  // checkType('float', 'tR', tR, {required: true});
  //  
  // checkType('float', 'tG', tG, {required: true});
  //  
  // checkType('float', 'tB', tB, {required: true});
  //  
  // checkType('float', 'tA', tA, {required: true});
  //  
  // checkType('String', 'watermark', watermark, {required: true});
  //  
  // checkType('String', 'watermarkFont', watermarkFont, {required: true});
  //  
  // checkType('float', 'wR', wR, {required: true});
  //  
  // checkType('float', 'wG', wG, {required: true});
  //  
  // checkType('float', 'wB', wB, {required: true});
  //  
  // checkType('float', 'wA', wA, {required: true});
  //  
  // checkType('int', 'interval', interval, {required: true});
  //  

  var params = {
    title: title,
    titleFont: titleFont,
    tR: tR,
    tG: tG,
    tB: tB,
    tA: tA,
    watermark: watermark,
    watermarkFont: watermarkFont,
    wR: wR,
    wG: wG,
    wB: wB,
    wA: wA,
    interval: interval
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setup', params, callback), this)
};
/**
 * @callback module:thatoverlay.ThatOverlay~setupCallback
 * @param {external:Error} error
 */


/**
 * @alias module:thatoverlay.ThatOverlay.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the parent {@link module:core.MediaPipeline MediaPipeline}
 */
ThatOverlay.constructorParams = {
  mediaPipeline: {
    type: 'kurento.MediaPipeline',
    required: true
  }
};

/**
 * @alias module:thatoverlay.ThatOverlay.events
 *
 * @extends module:core/abstracts.Filter.events
 */
ThatOverlay.events = Filter.events;


/**
 * Checker for {@link module:thatoverlay.ThatOverlay}
 *
 * @memberof module:thatoverlay
 *
 * @param {external:String} key
 * @param {module:thatoverlay.ThatOverlay} value
 */
function checkThatOverlay(key, value)
{
  if(!(value instanceof ThatOverlay))
    throw ChecktypeError(key, ThatOverlay, value);
};


module.exports = ThatOverlay;

ThatOverlay.check = checkThatOverlay;
